type Cask @entity {
  id: ID!

  totalDepositCount: BigInt!
  totalDepositAmount: BigDecimal!
  totalWithdrawCount: BigInt!
  totalWithdrawAmount: BigDecimal!
  totalProtocolPayments: BigDecimal!
  totalProtocolFees: BigDecimal!
  totalNetworkFees: BigDecimal!
}

type CaskUser @entity {
  id: ID!
  appearedAt: Int!

  balance: BigDecimal!
  depositCount: BigInt!
  depositAmount: BigDecimal!
  withdrawCount: BigInt!
  withdrawAmount: BigDecimal!
}

type CaskConsumer @entity {
  id: ID!
  subscriptionCount: BigInt!
  appearedAt: Int!

  totalSubscriptionCount: BigInt!
  activeSubscriptionCount: BigInt!
}

type CaskProvider @entity {
  id: ID!
  paymentAddress: Bytes
  profileCid: String
  appearedAt: Int!

  totalPaymentsReceived: BigDecimal!
  totalSubscriptionCount: BigInt!
  activeSubscriptionCount: BigInt!
}

type CaskSubscriptionPlan @entity {
  id: ID!
  provider: CaskProvider!
  planId: Int!

  totalSubscriptionCount: BigInt!
  activeSubscriptionCount: BigInt!
  trialingSubscriptionCount: BigInt!
  canceledSubscriptionCount: BigInt!
  pausedSubscriptionCount: BigInt!
  pastDueSubscriptionCount: BigInt!
}

enum SubscriptionStatus {
  None,
  Trialing
  Active
  Paused
  Canceled
  PastDue
}

type CaskSubscription @entity {
  id: ID!
  ref: Bytes
  cid: String

  currentOwner: CaskConsumer!
  provider: CaskProvider!
  plan: CaskSubscriptionPlan!

  createdAt: Int!
  renewAt: Int!
  cancelAt: Int!

  status: SubscriptionStatus!

  renewCount: BigInt!
  transferCount: BigInt!
}


enum TransactionType {
 SubscriptionCreated
 SubscriptionPlanChanged
 SubscriptionPendingChangePlan
 SubscriptionPaused
 SubscriptionResumed
 SubscriptionPendingCancel
 SubscriptionCanceled
 SubscriptionRenewed
 SubscriptionTrialEnded
 SubscriptionPastDue
 AssetDeposit
 AssetWithdrawal
 Payment
 TransferValue
}

type CaskTransaction @entity {
  id: ID!
  type: TransactionType!
  timestamp: Int!

  consumer: CaskConsumer
  provider: CaskProvider

  assetAddress: Bytes
  assetName: String

  amount: BigDecimal

}