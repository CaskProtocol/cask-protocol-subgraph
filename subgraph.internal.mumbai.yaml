specVersion: 0.0.2
description: Cask is a decentralized non-custodial protocol for managing recurring payment agreements.
repository: https://github.com/CaskProtocol/cask-protocol-subgraph
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: CaskSubscriptions
    network: mumbai
    source:
      address: "0xaC7331DF9CB75beC251b75647AEccdeA8d336e33"
      abi: CaskSubscriptions
      startBlock: 26026884
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      file: ./src/mappings/subscriptions.ts
      entities:
        - CaskSubscription
        - CaskTransaction
        - CaskConsumer
        - CaskProvider
        - CaskSubscriptionPlan
        - CaskDiscount
      abis:
        - name: CaskSubscriptions
          file: ./abis/CaskSubscriptions.json
      eventHandlers:
        - event: SubscriptionCanceled(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionCanceled
        - event: SubscriptionChangedPlan(indexed address,indexed address,indexed uint256,bytes32,uint32,uint32,bytes32)
          handler: handleSubscriptionChangedPlan
        - event: SubscriptionCreated(indexed address,indexed address,indexed uint256,bytes32,uint32,bytes32)
          handler: handleSubscriptionCreated
        - event: SubscriptionPastDue(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionPastDue
        - event: SubscriptionPaused(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionPaused
        - event: SubscriptionPendingPause(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionPendingPause
        - event: SubscriptionPendingCancel(indexed address,indexed address,indexed uint256,bytes32,uint32,uint32)
          handler: handleSubscriptionPendingCancel
        - event: SubscriptionPendingChangePlan(indexed address,indexed address,indexed uint256,bytes32,uint32,uint32)
          handler: handleSubscriptionPendingChangePlan
        - event: SubscriptionRenewed(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionRenewed
        - event: SubscriptionResumed(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionResumed
        - event: SubscriptionTrialEnded(indexed address,indexed address,indexed uint256,bytes32,uint32)
          handler: handleSubscriptionTrialEnded
        - event: Transfer(indexed address,indexed address,indexed uint256)
          handler: handleTransfer
  - kind: ethereum/contract
    name: CaskVault
    network: mumbai
    source:
      address: "0xC040BDBBb2b1AdDaa7586962e9Fcb5585D7e66a9"
      abi: CaskVault
      startBlock: 26026872
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      file: ./src/mappings/vault.ts
      entities:
        - Cask
        - CaskUser
      abis:
        - name: CaskVault
          file: ./abis/CaskVault.json
      eventHandlers:
        - event: AssetDeposited(indexed address,indexed address,uint256,uint256,uint256)
          handler: handleAssetDeposited
        - event: AssetWithdrawn(indexed address,indexed address,uint256,uint256,uint256)
          handler: handleAssetWithdrawn
        - event: Payment(indexed address,indexed address,uint256,uint256,uint256,uint256,indexed address,uint256,uint256)
          handler: handlePayment
        - event: TransferValue(indexed address,indexed address,uint256,uint256)
          handler: handleTransferValue
  - kind: ethereum/contract
    name: CaskDCA
    network: mumbai
    source:
      address: "0x41Eb18BA90c2c955f1987BD3AeA6feb0F70e0e49"
      abi: CaskDCA
      startBlock: 26974719
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      file: ./src/mappings/dca.ts
      entities:
        - CaskTransaction
        - CaskDCA
        - CaskConsumer
      abis:
        - name: CaskDCA
          file: ./abis/CaskDCA.json
      eventHandlers:
        - event: DCACreated(indexed bytes32,indexed address,indexed address,address,address,uint256,uint256,uint32)
          handler: handleDCACreated
        - event: DCAPaused(indexed bytes32,indexed address)
          handler: handleDCAPaused
        - event: DCAResumed(indexed bytes32,indexed address)
          handler: handleDCAResumed
        - event: DCASkipped(indexed bytes32,indexed address,uint8)
          handler: handleDCASkipped
        - event: DCAProcessed(indexed bytes32,indexed address,uint256,uint256,uint256)
          handler: handleDCAProcessed
        - event: DCACanceled(indexed bytes32,indexed address)
          handler: handleDCACanceled
        - event: DCACompleted(indexed bytes32,indexed address)
          handler: handleDCACompleted
  - kind: ethereum/contract
    name: CaskP2P
    network: mumbai
    source:
      address: "0x92b34C07bD6B77A88d91919469c540a7e1b269e4"
      abi: CaskP2P
      startBlock: 26974686
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      file: ./src/mappings/p2p.ts
      entities:
        - CaskTransaction
        - CaskP2P
        - CaskConsumer
      abis:
        - name: CaskP2P
          file: ./abis/CaskP2P.json
      eventHandlers:
        - event: P2PCreated(indexed bytes32,indexed address,indexed address,uint256,uint256,uint32)
          handler: handleP2PCreated
        - event: P2PPaused(indexed bytes32,indexed address)
          handler: handleP2PPaused
        - event: P2PResumed(indexed bytes32,indexed address)
          handler: handleP2PResumed
        - event: P2PSkipped(indexed bytes32,indexed address)
          handler: handleP2PSkipped
        - event: P2PProcessed(indexed bytes32,indexed address,uint256,uint256)
          handler: handleP2PProcessed
        - event: P2PCanceled(indexed bytes32,indexed address)
          handler: handleP2PCanceled
        - event: P2PCompleted(indexed bytes32,indexed address)
          handler: handleP2PCompleted